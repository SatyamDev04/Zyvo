#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.7.2 (swiftlang-5.7.2.135.5 clang-1400.0.29.51)
#ifndef TWILIOTWILSOCKLIB_SWIFT_H
#define TWILIOTWILSOCKLIB_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wduplicate-method-match"
#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT noexcept
#endif
#else
#if !defined(SWIFT_NOEXCEPT)
# define SWIFT_NOEXCEPT 
#endif
#endif
#if defined(__cplusplus)
#if !defined(SWIFT_CXX_INT_DEFINED)
#define SWIFT_CXX_INT_DEFINED
namespace swift {
using Int = ptrdiff_t;
using UInt = size_t;
}
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="TwilioTwilsockLib",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)
@class NSString;
@class NSData;

SWIFT_CLASS_NAMED("ObjCAuthStruct")
@interface TCHAuthStruct : NSObject
@property (nonatomic, copy) NSString * _Nonnull token;
@property (nonatomic, copy) NSString * _Nullable continuationToken;
@property (nonatomic, copy) NSString * _Nonnull activeGrant;
@property (nonatomic, copy) NSData * _Nullable tweaks;
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token continuationToken:(NSString * _Nullable)continuationToken activeGrant:(NSString * _Nonnull)activeGrant tweaks:(NSData * _Nullable)tweaks OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token continuationToken:(NSString * _Nullable)continuationToken activeGrant:(NSString * _Nonnull)activeGrant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithToken:(NSString * _Nonnull)token activeGrant:(NSString * _Nonnull)activeGrant OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCClientMetadata")
@interface TCHClientMetadata : NSObject
/// native, xamarin, etc
@property (nonatomic, copy) NSString * _Nonnull envName;
///
@property (nonatomic, copy) NSString * _Nonnull envVersion;
/// macOS, iOS, macCatalyst, etc
@property (nonatomic, copy) NSString * _Nonnull osName;
///
@property (nonatomic, copy) NSString * _Nonnull osVersion;
/// armv7, armv8, etc
@property (nonatomic, copy) NSString * _Nonnull osArch;
///
@property (nonatomic, copy) NSString * _Nonnull deviceModel;
/// Apple
@property (nonatomic, copy) NSString * _Nonnull deviceVendor;
/// iphone, ipad, laptop
@property (nonatomic, copy) NSString * _Nonnull deviceType;
/// native, cordova, xamarin
@property (nonatomic, copy) NSString * _Nonnull sdkName;
/// shipped version of the SDK
@property (nonatomic, copy) NSString * _Nonnull sdkVersion;
/// sync, conversations
@property (nonatomic, copy) NSString * _Nonnull sdkType;
/// User’s app name
@property (nonatomic, copy) NSString * _Nonnull appName;
/// User’s app version
@property (nonatomic, copy) NSString * _Nonnull appVersion;
- (nonnull instancetype)initWithEnvName:(NSString * _Nonnull)envName envVersion:(NSString * _Nonnull)envVersion osName:(NSString * _Nonnull)osName osVersion:(NSString * _Nonnull)osVersion osArch:(NSString * _Nonnull)osArch deviceModel:(NSString * _Nonnull)deviceModel deviceVendor:(NSString * _Nonnull)deviceVendor deviceType:(NSString * _Nonnull)deviceType sdkName:(NSString * _Nonnull)sdkName sdkVersion:(NSString * _Nonnull)sdkVersion sdkType:(NSString * _Nonnull)sdkType appName:(NSString * _Nonnull)appName appVersion:(NSString * _Nonnull)appVersion OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class TCHServerSideError;

SWIFT_CLASS_NAMED("ObjCErrorInfo")
@interface TCHErrorInfo : NSObject
@property (nonatomic, readonly, strong) TCHErrorInfo * _Nullable nestedError;
@property (nonatomic, readonly, strong) TCHServerSideError * _Nullable serverSideError;
@property (nonatomic, readonly, copy) NSString * _Nonnull reason;
@property (nonatomic, readonly) NSInteger errorCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TCHHttpMethod, "ObjCHttpMethod", open) {
  TCHHttpMethodGet = 0,
  TCHHttpMethodPost = 1,
  TCHHttpMethodPut = 2,
  TCHHttpMethodDelete = 3,
};

@class NSURL;
@class TCHStringMultiMap;

SWIFT_CLASS_NAMED("ObjCHttpRequest")
@interface TCHHttpRequest : NSObject
@property (nonatomic, readonly, copy) NSURL * _Nonnull url;
@property (nonatomic) enum TCHHttpMethod method;
@property (nonatomic, strong) TCHStringMultiMap * _Nullable headers;
@property (nonatomic) NSTimeInterval timeout;
@property (nonatomic, copy) NSString * _Nullable payload;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(enum TCHHttpMethod)method OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url headers:(TCHStringMultiMap * _Nonnull)headers OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(enum TCHHttpMethod)method headers:(TCHStringMultiMap * _Nonnull)headers timeout:(NSTimeInterval)timeout OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUrl:(NSURL * _Nonnull)url method:(enum TCHHttpMethod)method headers:(TCHStringMultiMap * _Nonnull)headers timeout:(NSTimeInterval)timeout payload:(NSString * _Nullable)payload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ObjCHttpResponse")
@interface TCHHttpResponse : NSObject
@property (nonatomic, readonly) NSInteger statusCode;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly, copy) NSString * _Nullable payload;
@property (nonatomic, readonly, strong) TCHStringMultiMap * _Nullable headers;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TCHErrorCode, "ObjcErrorCode", open) {
  TCHErrorCodeUnknown = 1,
  TCHErrorCodeCancelled = 2,
  TCHErrorCodeTimeout = 3,
  TCHErrorCodeTransportDisconnected = 8,
  TCHErrorCodeNetworkBecameUnreachable = 9,
  TCHErrorCodeUnauthorized = 10,
  TCHErrorCodeTokenExpired = 11,
  TCHErrorCodeTokenUpdatedLocally = 12,
  TCHErrorCodeTooManyRequests = 13,
  TCHErrorCodeHostnameUnverified = 14,
  TCHErrorCodeSslHandshakeError = 15,
  TCHErrorCodeCloseMessageReceived = 16,
  TCHErrorCodeCannotParse = 17,
};

enum TCHLoggerLevel : NSInteger;

SWIFT_CLASS_NAMED("ObjcLogger")
@interface TCHLogger : NSObject
+ (void)setLoggerLevel:(enum TCHLoggerLevel)logLevel;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM_NAMED(NSInteger, TCHLoggerLevel, "ObjcLoggerLevel", open) {
  TCHLoggerLevelTrace = 0,
  TCHLoggerLevelDebug = 1,
  TCHLoggerLevelInfo = 2,
  TCHLoggerLevelWarning = 3,
  TCHLoggerLevelError = 4,
  TCHLoggerLevelSilent = 5,
};


SWIFT_CLASS_NAMED("ObjcStringMultiMap")
@interface TCHStringMultiMap : NSObject
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nonnull keys;
- (nonnull instancetype)initWithDictionary:(NSDictionary<NSString *, id> * _Nonnull)dict;
- (NSSet<NSString *> * _Nullable)objectForKeyedSubscript:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (void)setObject:(NSSet<NSString *> * _Nullable)newValue forKeyedSubscript:(NSString * _Nonnull)key;
- (void)appendValue:(NSString * _Nonnull)value forKey:(NSString * _Nonnull)key;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS_NAMED("ObjcTransportConfig")
@interface TCHTransportConfig : NSObject
@property (nonatomic, copy) NSString * _Nonnull serviceAddr;
@property (nonatomic, copy) NSString * _Nonnull endpoint;
@property (nonatomic) NSInteger servicePort;
@property (nonatomic) BOOL useProxy;
@property (nonatomic) BOOL verifyCerts;
@property (nonatomic) BOOL strictCheck;
- (nonnull instancetype)initWithServiceAddr:(NSString * _Nonnull)serviceAddr endpoint:(NSString * _Nonnull)endpoint servicePort:(NSInteger)servicePort useProxy:(BOOL)useProxy verifyCerts:(BOOL)verifyCerts strictCheck:(BOOL)strictCheck OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS_NAMED("ServerSideError")
@interface TCHServerSideError : NSObject
@property (nonatomic, readonly) NSInteger code;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly) NSInteger errorCode;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@protocol TCHTwilsockObserver;
@class CancellationToken;

SWIFT_CLASS_NAMED("TwilsockObjCInterface")
@interface TCHTwilsockInterface : NSObject
- (nonnull instancetype)initWithCertificates:(NSArray<NSString *> * _Nonnull)certificates authStruct:(TCHAuthStruct * _Nonnull)authStruct clientMetadata:(TCHClientMetadata * _Nonnull)clientMetadata notificationProductId:(NSString * _Nonnull)notificationProductId transportConfig:(TCHTransportConfig * _Nonnull)transportConfig OBJC_DESIGNATED_INITIALIZER;
- (void)addObserver:(id <TCHTwilsockObserver> _Nonnull)observer;
- (void)removeObserver:(id <TCHTwilsockObserver> _Nonnull)observer;
- (void)populateInitRegistrations:(NSArray<NSString *> * _Nonnull)messageTypes;
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)disconnectAndReturnError:(NSError * _Nullable * _Nullable)error;
- (BOOL)shutdownAndReturnError:(NSError * _Nullable * _Nullable)error;
- (CancellationToken * _Nullable)updateToken:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(TCHHttpResponse * _Nullable, TCHErrorInfo * _Nullable))completion;
- (CancellationToken * _Nullable)sendRequest:(TCHHttpRequest * _Nonnull)request error:(NSError * _Nullable * _Nullable)error completion:(void (^ _Nullable)(TCHHttpResponse * _Nullable, TCHErrorInfo * _Nullable))completion SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_PROTOCOL_NAMED("TwilsockObjCObserver")
@protocol TCHTwilsockObserver
- (void)onConnecting;
- (void)onConnected;
- (void)onDisconnected:(NSString * _Nonnull)reason;
- (void)onFatalError:(TCHErrorInfo * _Nonnull)errorInfo;
- (void)onNonFatalError:(TCHErrorInfo * _Nonnull)errorInfo;
- (void)onTokenAboutToExpire;
- (void)onTokenExpired;
- (void)onMessageReceivedWithType:(NSString * _Nonnull)messageType message:(NSString * _Nonnull)message;
@end

#endif
#if defined(__cplusplus)
#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
